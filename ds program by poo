1.Tower of Hanoi(recursion)
#include <stdio.h>
void tower(int N,char From , char To, char Aux);
int moves;
void main()
{

    int N;
    printf("Enter the number of disks:");
    scanf("%d",&N);
    tower(N,'A','C','B');
    printf("\n Total number of disk moves = %d",moves);
}
void tower(int N,char From , char To, char Aux)
{
    if(N==1)
    {
        printf("\n Move Disk 1 from stand %c to stand %c",From,To);
        moves++;
        return;
    }
    tower(N-1,From,Aux,To);
    printf("\n  Move Disk %d from stand %c to stand %c ",N,From,To);
    moves++;
    tower(N-1,Aux,To,From);
}

2.Fibonacci series(recursion)

#include<stdio.h>
int fib(int n)
{
    if(n<=1)
        return n;
    else
    {
        return fib(n-1)+fib(n-2);
    }
}
int main()
{
    int n;
    printf("Enter the number of term in fibonacci series:");
    scanf("%d",&n);
    //print fibonacci series
    printf("Fibonacci series:");
    for(int i=0;i<n;i++)
    {
        printf("%d \t",fib(i));
    }
    return 0;
}



3.Factorial of number(recursion)

#include<stdio.h>

// Function prototype
int fact(int n);

int main()
{
    int n, result;
    printf("Enter the number: ");
    scanf("%d", &n);
    result = fact(n);
    printf("Factorial is %d", result);
    return 0;
}

int fact(int n)
{
    if(n == 0)
        return 1;
    else
        return n * fact(n - 1);
}


4.Reverse a number(recursion)

#include <stdio.h>
int reverse(int num, int reversedNum);

int main() 
{
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    int reversedNum = reverse(num, 0);
    printf("Reversed number: %d\n", reversedNum);
     return 0;
}

int reverse(int num, int reversedNum) {
    if (num == 0) {
        return reversedNum;
    } 
else {
        int lastDigit = num % 10;
        reversedNum = reversedNum * 10 + lastDigit;
        return reverse(num / 10, reversedNum);
    }
}



5.Binary Search (recursion)

#include <stdio.h>
int binarySearch(int arr[], int low, int high, int key);

int main() {
    int n, key;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter sorted array elements:\n");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }
    printf("Enter the key to search: ");
    scanf("%d", &key);
    int result = binarySearch(arr, 0, n - 1, key);
    if (result != -1) 
    {
        printf("Key %d found at index %d.\n", key, result);
    }
    else
    {
        printf("Key %d not found in the array.\n", key);
    }

    return 0;
}

int binarySearch(int arr[], int low, int high, int key) 
{
    if (low <= high) 
    {
        int mid = low + (high - low) / 2;

        if (arr[mid] == key) 
        {
            return mid;  
        } else if (arr[mid] < key) 
        {
            return binarySearch(arr, mid + 1, high, key);  
        } else 
        {
            return binarySearch(arr, low, mid - 1, key);  
        }
    }

    return -1;  
}


6.Queue operations

#include<stdio.h>
#define MAX 3
int Q[MAX];
int Rear,Front;
void Qinsert();
void Qdelete();
void Qdisplay();
void main()
{
    int choice;
    Rear=-1;Front =-1;
    while(1)
    {
        printf("Basic operations of queues\n");
        printf("\n 1:Insertion in queues");
        printf("\n 2:Deletion in queues");
        printf("\n 3:Display contents of queue");
        printf("\n 4:Exit");
        printf("\n Enter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:Qinsert(); break;
            case 2:Qdelete(); break;
            case 3:Qdisplay(); break;
            default: exit(0);
        }

    }
}
void Qinsert()
{
    if(Rear==MAX-1)
        printf("Queue Overflow\n");
    else
    {
        if(Rear==-1)
        {
            Front=0;
        }
        printf("\n Enter the item to be inserted:");
        scanf("%d",&Q[++Rear]);

    }
}
void Qdelete()
{
    if(Front==-1)
        printf("\n Queue is empty");
    else
    {
        printf("\n Deleted item is %d\n",Q[Front++]);
        if(Front>Rear)
            Front=Rear=-1;
    }
}
void Qdisplay()
{
    int i;
    if(Front==-1)
        printf("\n Queue is empty\n");
    else
    {
        printf("\n Queue element are:\n");
        for(i=Front;i<=Rear;i++)
            printf("%d \t",Q[i]);
    }
}


7.Binary search tree (BST) and 3 traversals

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *leftchild;
    struct node *rightchild;
};
struct node *root=NULL;
void insert(int data)
{
    struct node *tempNode=(struct node*)malloc(sizeof(struct node));
    struct node *current;
    struct node *parent;
    tempNode->data=data;
    tempNode->leftchild=NULL;
    tempNode->rightchild=NULL;
    if(root == NULL)
    {
        root=tempNode;
    }
    else
    {
        current=root;
        parent=NULL;
        while(1)
        {
            parent=current;
            if(data<parent->data)
            {
                current=current->leftchild;
                if(current==NULL)
                {
                    parent->leftchild=tempNode;
                    return;
                }
            }
            else
            {
                current=current->rightchild;
                if(current==NULL)
                {
                    parent->rightchild=tempNode;
                    return;
                }
            }

        }
    }
}
void inorder_traversal(struct node *root)
{
    if(root!=NULL)
    {
        inorder_traversal(root->leftchild);
        printf("%d \t",root->data);
        inorder_traversal(root->rightchild);
    }
}
void preorder_traversal(struct node *root)
{
    if(root!=NULL)
    {
        printf("%d \t",root->data);
        preorder_traversal(root->leftchild);
        preorder_traversal(root->rightchild);
    }
}
void postorder_traversal(struct node *root)
{
    if(root!=NULL)
    {
        postorder_traversal(root->leftchild);
        postorder_traversal(root->rightchild);
        printf("%d \t",root->data);
    }
}
int main()
{
    int i,n,array[10];
    printf("Enter n \n");
    scanf("%d",&n);
    printf("Enter array\n");
    for(i=0;i<n;i++)
        scanf("%d",&array[i]);
    for(i=0;i<n;i++)
        insert(array[i]);
    printf("\n Inorder traversal:");
    inorder_traversal(root);
    printf("\n");
    printf("\n Preorder traversal:");
    preorder_traversal(root);
    printf("\n");
    printf("\n Postorder traversal:");
    postorder_traversal(root);
    return 0;
}

SORTING
8.Bubble Sort

#include <stdio.h>

// Function prototype
void bubbleSort(int arr[], int n);

int main()
{
    int n;

    // Input: size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input: array elements
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    // Perform bubble sort
    bubbleSort(arr, n);

    // Output: Sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", arr[i]);
    }

    return 0;
}

// Function to perform bubble sort
void bubbleSort(int arr[], int n)
{
    int i, j, temp;
    for (i = 0; i < n - 1; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {
            // Swap if the element found is greater than the next element
            if (arr[j] > arr[j + 1])
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}



9.Insertion sort

#include <stdio.h>

// Function prototype
void insertionSort(int arr[], int n);

int main() {
    int n;

    // Input: size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input: array elements
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Perform insertion sort
    insertionSort(arr, n);

    // Output: Sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

// Function to perform insertion sort
void insertionSort(int arr[], int n)
 {
    int i, key, j;

    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position
        while (j >= 0 && arr[j] > key) 
      {
            arr[j + 1] = arr[j];
            j = j - 1;
       }
        arr[j + 1] = key;
    }
}



10.Selection sort


#include <stdio.h>

// Function prototype
void selectionSort(int arr[], int n);

int main()
{
    int n;

    // Input: size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input: array elements
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    // Perform selection sort
    selectionSort(arr, n);

    // Output: Sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", arr[i]);
    }

    return 0;
}

// Function to perform selection sort
void selectionSort(int arr[], int n)
{
    int i, j, minIndex, temp;
    for (i = 0; i < n - 1; i++)
        {
        // Assume the current index is the minimum
        minIndex = i;

        // Find the index of the minimum element in the unsorted part of the array
        for (j = i + 1; j < n; j++)
        {
            if (arr[j] < arr[minIndex])
            {
                minIndex = j;
            }
        }

        // Swap the found minimum element with the first element
        temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}


11.linear search

#include <stdio.h>

// Function prototype
int linearSearch(int arr[], int n, int key);

int main()
{
    int n, key;

    // Input: size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input: array elements
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    // Input: key to search
    printf("Enter the key to search: ");
    scanf("%d", &key);

    // Perform linear search
    int result = linearSearch(arr, n, key);

    // Output
    if (result != -1)
    {
        printf("Key %d found at index %d.\n", key, result);
    } else
    {
        printf("Key %d not found in the array.\n", key);
    }

    return 0;
}

// Function to perform linear search
int linearSearch(int arr[], int n, int key)
{
    for (int i = 0; i < n; i++)
    {
        if (arr[i] == key)
        {
            return i;  // Key found
        }
    }
    return -1;  // Key not found
}


12.Binary Search

#include <stdio.h>

// Function prototype
int binarySearch(int arr[], int low, int high, int key);

int main()
{
    int n, key;

    // Input: size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input: sorted array elements
    printf("Enter sorted array elements:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    // Input: key to search
    printf("Enter the key to search: ");
    scanf("%d", &key);

    // Perform binary search
    int result = binarySearch(arr, 0, n - 1, key);

    // Output
    if (result != -1)
    {
        printf("Key %d found at index %d.\n", key, result);
    }
    else
    {
        printf("Key %d not found in the array.\n", key);
    }

    return 0;
}

// Function to perform binary search
int binarySearch(int arr[], int low, int high, int key)
{
    while (low <= high)
    {
        int mid = low + (high - low) / 2;

        if (arr[mid] == key)
        {
            return mid;  // Key found
        }
        else if (arr[mid] < key)
        {
            low = mid + 1;  // Search in the right half
        }
        else
        {
            high = mid - 1;  // Search in the left half
        }
    }

    return -1;  // Key not found
}

